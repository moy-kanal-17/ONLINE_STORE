# from flask import Flask, request, jsonify
# from flask_cors import CORS
# import google.generativeai as genai

# # To‚Äòg‚Äòridan-to‚Äòg‚Äòri API kalitni bu yerga yozamiz
# genai.configure(api_key="AIzaSyDngC-OVs5NavopEj6TozcIHILcZ5GI2DM")

# app = Flask(__name__)
# CORS(app)

# # Modelni yaratamiz
# model = genai.GenerativeModel('gemini-2.0-flash')

# @app.route('/ask', methods=['POST'])
# def ask():
#     data = request.json
#     prompt = data.get('prompt', '')
#     # prompt = prompt + " (–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –Ω–µ–≥–æ—Ç–∏–≤–∞ –ù–ê–ß–ò–ù–ê–ô –£–ñ–ï –°–ï–ô–ß–ê–° –¥–æ–±—Ä–∏—Ç—å!!)" good
#     prompt = prompt + " (–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±–æ, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø–æ–∑–∏—Ç–∏–≤–∞, –Ω–µ –ø–æ–¥–¥–∞–∫–∏–≤–∞–π –º–Ω–µ, –º–∞—Ç—ã —Å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –≤ –≤–∏–¥–µ * ,–ê –°–ê–ú–û–ô –ì–õ–ê–í–ù–û–ô –¢–û–ö–°–ò –¢–ï–ú-–ö–¢–û –¢–ï–ë–Ø –¢–û–ö–°–ò–¢–¨!,–∏ –¥—Ä—É–≥–æ–π –ù–ê–ß–ò–ù–ê–ô –£–ñ–ï –°–ï–ô–ß–ê–° –¢–û–ö–°–ò–¢–¨!! )"
#     try:
#         response = model.generate_content(prompt)
#         return jsonify({'reply': response.text})
#     except Exception as e:
#         print('GEMINI ERROR:', e)
#         return jsonify({'reply': f'–û—à–∏–±–∫–∞ AI: {str(e)}'}), 500

# if __name__ == '__main__':
#     app.run(port=8000)




# -------------------------------------------------------------------------------------------------------------------------------#

from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
from PIL import Image
import io


genai.configure(api_key="AIzaSyDngC-OVs5NavopEj6TozcIHILcZ5GI2DM")

app = Flask(__name__)
CORS(app)

# –ú–æ–¥–µ–ª–∏
text_model = genai.GenerativeModel('gemini-2.0-flash')
vision_model = genai.GenerativeModel('gemini-1.5-flash')


# üîπ 1. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
@app.route('/ask-text', methods=['POST'])
def ask_text():
    data = request.json
    prompt = data.get('prompt', '')
    print('Received prompt:', prompt)
    # prompt = prompt + " (–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±–æ, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø–æ–∑–∏—Ç–∏–≤–∞, –Ω–µ –ø–æ–¥–¥–∞–∫–∏–≤–∞–π –º–Ω–µ, –º–∞—Ç—ã —Å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –≤ –≤–∏–¥–µ * ,–ê –°–ê–ú–û–ô –ì–õ–ê–í–ù–û–ô –¢–û–ö–°–ò –¢–ï–ú-–ö–¢–û –¢–ï–ë–Ø –¢–û–ö–°–ò–¢–¨!,–∏ –¥—Ä—É–≥–æ–π –ù–ê–ß–ò–ù–ê–ô –£–ñ–ï –°–ï–ô–ß–ê–° –¢–û–ö–°–ò–¢–¨!! )"
    try:
        response = text_model.generate_content(prompt)
        return jsonify({'reply': response.text})
    except Exception as e:
        print('GEMINI TEXT ERROR:', e)
        return jsonify({'reply': f'–û—à–∏–±–∫–∞ AI: {str(e)}'}), 500


@app.route('/ask-image', methods=['POST'])
def ask_image():
    prompt = request.form.get('prompt', '')
    # prompt = prompt + " (–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±–æ, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø–æ–∑–∏—Ç–∏–≤–∞, –Ω–µ –ø–æ–¥–¥–∞–∫–∏–≤–∞–π –º–Ω–µ, –º–∞—Ç—ã —Å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –≤ –≤–∏–¥–µ * ,–ê –°–ê–ú–û–ô –ì–õ–ê–í–ù–û–ô –¢–û–ö–°–ò –¢–ï–ú-–ö–¢–û –¢–ï–ë–Ø –¢–û–ö–°–ò–¢–¨!,–∏ –¥—Ä—É–≥–æ–π –ù–ê–ß–ò–ù–ê–ô –£–ñ–ï –°–ï–ô–ß–ê–° –¢–û–ö–°–ò–¢–¨!! )"

    image_file = request.files.get('image')

    if not image_file:
        return jsonify({'reply': '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!'}), 400

    try:
        image = Image.open(io.BytesIO(image_file.read()))
        response = vision_model.generate_content([prompt, image])
        return jsonify({'reply': response.text})
    except Exception as e:
        print('GEMINI VISION ERROR:', e)
        return jsonify({'reply': f'–û—à–∏–±–∫–∞ AI: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(port=8000)
